---
openapi: "3.0.0"
info:
  title: "Pizza Store Server"
  version: "1.0.0"
  description: "This is a APIs of Pizza Store Server."
servers:
  - url: http://localhost:3000/api/v1
  - url: https://pizza-top.onrender.com/api/v1
tags:
  - name: Product
  - name: Order
  - name: Auth
  - name: User
  - name: Store
  - name: Report
paths:
  #-----------Product--------------------------------------------------------------------------------------------------------------------------------
  /products:
    get:
      tags:
        - Product
      summary: Get products information
      parameters:
        - $ref: "#/components/parameters/page"
        - $ref: "#/components/parameters/limit"
        - $ref: "#/components/parameters/category"
      responses:
        200:
          description: "Successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Products"
        500:
          description: Internal Server Error

    post:
      tags:
        - Product
      summary: "Create new product"
      requestBody:
        content:
          multipart/form-data:
            schema:
              allOf:
                - $ref: "#/components/schemas/CreateProductBody"
                - type: object
        description: "Created new product"
        required: true
      responses:
        201:
          description: "Successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Product"
        401:
          description: Unauthorized
        422:
          description: Unprocessable Entity
      security:
        - BearerAuth: []

  /products/{id}:
    get:
      tags:
        - Product
      summary: Get product by id
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64

      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateProductResponse"
        401:
          description: Unauthorized
        404:
          description: Product not found

    put:
      tags:
        - Product
      summary: "Update product by id"
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          multipart/form-data:
            schema:
              allOf:
                - $ref: "#/components/schemas/CreateProductBody"
                - type: object
        description: "Update product"
        required: true
      responses:
        200:
          description: "Update product success"
        401:
          description: Unauthorized
        422:
          description: Unprocessable Entity
      security:
        - BearerAuth: []

    delete:
      tags:
        - Product
      summary: Delete by id
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        401:
          description: Unauthorized
        404:
          description: Product not found
      security:
        - BearerAuth: []

  /products/{id}/prices:
    post:
      tags:
        - Product
      summary: "Add price for product"
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - type: object
                - properties:
                    size:
                      type: string
                    price:
                      type: number
                      example: 200000

        description: "Created new product"
        required: true
      responses:
        200:
          description: "Successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AddPriceProductResponse"
        401:
          description: Unauthorized
        422:
          description: Unprocessable Entity
      security:
        - BearerAuth: []

  #-----------Order--------------------------------------------------------------------------------------------------------------------------------
  /orders:
    get:
      tags:
        - Order
      summary: Get orders information
      parameters:
        - $ref: "#/components/parameters/orderCode"
      responses:
        200:
          description: "Successful operation"
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/Order"
                  - $ref: "#/components/schemas/Orders"

        401:
          description: Unauthorized
        500:
          description: Internal Server Error
      security:
        - BearerAuth: []

    post:
      tags:
        - Order
      summary: "Create new order"
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/components/schemas/CreateOrderBody"
                - type: object
        description: "Created new product"
        required: true
      responses:
        201:
          description: "Successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateOrderResponse"
        401:
          description: Unauthorized
        422:
          description: Unprocessable Entity
      security:
        - BearerAuth: []

  /orders/{id}:
    put:
      tags:
        - Order
      summary: "Change status order"
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/OrderStatus"
        description: "Change status order"
        required: true
      responses:
        200:
          description: "OK"
      security:
        - BearerAuth: []

  #-----------Auth--------------------------------------------------------------------------------------------------------------------------------
  /auth/login:
    post:
      summary: Login account
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Login"
      responses:
        "200":
          description: Login success

  /auth/logout:
    post:
      summary: Logout account
      tags:
        - Auth
      security:
        - BearerAuth: []
      responses:
        "200":
          description: Logout success

  /auth/register:
    post:
      summary: Register account
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Register"
      responses:
        "201":
          description: Created

  /auth/forgot-password:
    post:
      summary: Reset password
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user_email:
                  type: string
              example:
                user_email: tanvo9927@gmail.com
      responses:
        "200":
          description: Reset password sucess

  #-----------User--------------------------------------------------------------------------------------------------------------------------------
  /users/me:
    get:
      summary: Get account profile
      tags:
        - User
      security:
        - BearerAuth: []
      responses:
        "200":
          description: "OK"

    patch:
      summary: Modify profile
      tags:
        - User
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ModifyProfile"
      responses:
        "200":
          description: "OK"

  /users:
    get:
      summary: Get all account profile
      tags:
        - User
      security:
        - BearerAuth: []
      responses:
        "200":
          description: "OK"

  /users/change-role:
    patch:
      summary: Change role
      tags:
        - User
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ChangeRole"
      responses:
        "200":
          description: "OK"

  /users/change-password:
    patch:
      summary: Change password
      tags:
        - User
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ChangePassword"
      responses:
        "200":
          description: "OK"

  #-----------Store--------------------------------------------------------------------------------------------------------------------------------

  #-----------Report--------------------------------------------------------------------------------------------------------------------------------

components:
  #------------------------------------------------------------------#
  schemas:
    ##------------------------
    Product:
      $ref: "./components/schemas/product.yml#/Product"
    Products:
      $ref: "./components/schemas/product.yml#/Products"
    CreateProductBody:
      $ref: "./components/schemas/product.yml#/CreateProductBody"
    CreateProductResponse:
      $ref: "./components/schemas/product.yml#/CreateProductResponse"
    AddPriceProductResponse:
      $ref: "./components/schemas/product.yml#/AddPriceProductResponse"

    ##------------------------
    Order:
      $ref: "./components/schemas/order.yml#/Order"
    Orders:
      $ref: "./components/schemas/order.yml#/Orders"
    CreateOrderBody:
      $ref: "./components/schemas/order.yml#/CreateOrderBody"
    CreateOrderResponse:
      $ref: "./components/schemas/order.yml#/CreateOrderResponse"
    OrderStatus:
      $ref: "./components/schemas/order.yml#/OrderStatus"

    ##------------------------
    Login:
      $ref: "components/schemas/auth.yml#/Login"
    Register:
      $ref: "components/schemas/auth.yml#/Register"

    ##------------------------
    ModifyProfile:
      $ref: "components/schemas/user.yml#/ModifyProfile"
    ChangeRole:
      $ref: "components/schemas/user.yml#/ChangeRole"
    ChangePassword:
      $ref: "components/schemas/user.yml#/ChangePassword"

  #------------------------------------------------------------------#
  parameters:
    page:
      $ref: "./components/parameters/general-parameter.yml#/page"
    limit:
      $ref: "./components/parameters/general-parameter.yml#/limit"
    category:
      $ref: "./components/parameters/general-parameter.yml#/category"
    orderCode:
      $ref: "./components/parameters/general-parameter.yml#/orderCode"

  #------------------------------------------------------------------#
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  #------------------------------------------------------------------#
  responses:
    UnauthorizedError:
      description: Access token is missing or invalid
externalDocs:
  description: "More details"
  url: "http://swagger.io"
